plugins {
	id 'fabric-loom' version '0.2.0-SNAPSHOT'
	id 'com.matthewprenger.cursegradle' version "1.1.2"
	id 'signing'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '5.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = projectGroup
archivesBaseName = projectArchiveBaseName
version = projectVersion

minecraft {
}

repositories {
	mavenLocal()
	maven {
    url = 'https://maven.jamieswhiteshirt.com/libs-release/'
  }
}

dependencies {
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings "net.fabricmc:yarn:$mcVersion.$mcMappings"
	modCompile "net.fabricmc:fabric-loader:$fabricLoaderVersion"
	modCompile "net.fabricmc:fabric:$fabricApiVersion"

	// modCompile "com.jamieswhiteshirt:developer-mode:1.0.3"

	// Nullable annotations.
	compile "com.google.code.findbugs:jsr305:3.0.0"
}

String parseChangelog(String path) {
	def file = new File(path)
	if (!file.exists())
		return '(no changelog)'
	String changelog = ""
	boolean end = false
	int line = 0
	file.eachLine {
		if (end || it == null)
			return
		++line
		if (!it.startsWith('+=+=+'))
			changelog += "$it\n"
		else if (line > 3)
			end = true
	}
	return changelog
}

// Contains curse token, maven user and password.
if (rootProject.file('private.gradle').exists()) {
	apply from: 'private.gradle'
}

processResources {
  from(sourceSets.main.resources.srcDirs) {
      include 'fabric.mod.json'
      expand 'version': project.version
  }
  from(sourceSets.main.resources.srcDirs) {
      exclude 'fabric.mod.json'
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

artifacts {
  archives(jar.archivePath) {
    builtBy remapJar
  }
  archives(sourcesJar.archivePath) {
    builtBy remapSourcesJar
  }
  archives(javadocJar.archivePath) {
    builtBy javadocJar
  }
}

publishing {
	publications {
		mavenPrimary(MavenPublication) {
			from components.java

			groupId = project.group
			artifactId = project.name
			version = project.version

			artifact sourcesJar
			artifact javadocJar

			pom {
				name = "Custom Gamerules"
				description = project.description
				url = "https://github.com/MisterPeModder/CustomGamerules"

				developers {
					developer {
						id = "misterpemodder"
						name = "Yanis Guaye"
						email = "yguaye44@gmail.com"
					}
				}

				licenses {
					license {
						name = "MIT License"
						url = "https://opensource.org/licenses/MIT"
						distribution = "repo"
					}
				}

				scm {
					url = "https://github.com/MisterPeModder/CustomGamerules"
					connection = "scm:git:git@github.com:MisterPeModder/CustomGamerules.git"
					developerConnection = "scm:git:git@github.com:MisterPeModder/CustomGamerules.git"
				}
			}
		}
	}

	repositories {
		if (project.hasProperty("mavenUser") && project.hasProperty("mavenPass")) {
			maven {
				url isSnapshot == 'true' ? mavenSnapshotRepo : mavenReleaseRepo
				credentials {
					username = project.properties.mavenUser
					password = project.properties.mavenPass
				}
			}
		} else {
			println("properties mavenUser and/or mavenPass are not defined!")
		}
	}
}

signing {
	if (project.hasProperty("signing.keyId")) {
		sign configurations.archives;
		sign publishing.publications.mavenPrimary
	} else {
		println("$name: skipping jar signing");
	}
}

curseforge {
	if (project.hasProperty('curseApiKey'))
	  apiKey = project.properties.curseApiKey
	project {
		id = '314538'
		changelog = parseChangelog('changelog.txt')
		releaseType = 'release'
		addGameVersion '1.14-Snapshot'
		mainArtifact(jar) {
			displayName = "CustomGamerules-${mcVersion}-${project.version}"
		}
		relations {
      optionalDependency 'fabric'
    }
	}
	options {
		forgeGradleIntegration = false
	}
}

afterEvaluate {
	// Manually set dependsOn because curseforge doesn't set one.
  tasks.curseforge314538.dependsOn remapJar
}
